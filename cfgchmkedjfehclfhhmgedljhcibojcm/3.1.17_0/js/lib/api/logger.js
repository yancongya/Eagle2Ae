class BaseLogger{logger=!1;debugMode=!1;log(e,r,o){throw new Error("Not implemented")}warn(e,r){throw new Error("Not implemented")}error(e,r){throw new Error("Not implemented")}debug(e,r){throw new Error("Not implemented")}critical(e,r){throw new Error("Not implemented")}sendMessage(e,r,o){throw new Error("Not implemented")}all(e){throw new Error("Not implemented")}get(e,r){throw new Error("Not implemented")}keep(e){throw new Error("Not implemented")}clean(){throw new Error("Not implemented")}enableDebug(){throw new Error("Not implemented")}status(){throw new Error("Not implemented")}openLogger(){throw new Error("Not implemented")}}class ForegroundLogger extends BaseLogger{info(e,r){this.sendMessage("INFO",e,r)}warn(e,r){this.sendMessage("WARN",e,r)}error(e,r){this.sendMessage("ERROR",e,r)}debug(e,r){this.debugMode&&this.sendMessage("INFO","[debug] "+e,r)}critical(e,r){this.sendMessage("CRITICAL",e,r)}sendMessage(e,r,o){eagle.runtime.sendMessage("log",{level:e,descriptor:r,data:o})}all(r){eagle.runtime.sendMessage({channel:"get-log"},e=>{r(e.logs)})}enableDebug(){this.debugMode=!0}}class BackgroundLogger extends BaseLogger{constructor(){super(),Logline.using(Logline.PROTOCOL.INDEXEDDB),this.extensionLog=new Logline("extension"),this.keep(7),Logline.config.set("verbose",!1),this.#registerRuntimeChannel(),this.info("---------------------------------------------"),this.info(" Extension Version: "+eagle.extension.manifest.version),this.info("         userAgent: "+navigator.userAgent),this.info("         Languages: "+navigator.languages.join(", ")),this.info("---------------------------------------------")}#registerRuntimeChannel(){eagle.runtime.onMessage("log",(e,r,o)=>("INFO"==e.level&&this.info(e.descriptor,e.data),"ERROR"==e.level&&this.error(e.descriptor,e.data),"CRITICAL"==e.level&&this.critical(e.descriptor,e.data),"WARN"==e.level&&this.warn(e.descriptor,e.data),o(),!0))}info(e,r){this.extensionLog.info(e,r)}warn(e,r){this.extensionLog.warn(e,r)}error(e,r){this.extensionLog.error(e,r)}debug(e,r){this.debugMode&&this.extensionLog.info("[debug] "+e,r)}critical(e,r){this.extensionLog.critical(e,r)}all(r){Logline.all(e=>{r(e)})}get(e,r){Logline.get(e,e=>{r(e)})}keep(e=.5){Logline.keep(e)}clean(){Logline.clean()}enableDebug(){this.debugMode=!0}status(){return Logline.PROTOCOL.INDEXEDDB.status}openLogger(){eagle.logger.info("[background] openLogger() called."),eagle.tabs.create({url:eagle.extension.path+"log-viewer/index.html"})}}class Logger{logger=null;debugMode=!1;constructor(){!eagle.env.isBackground()||eagle.env.isPopup()||eagle.env.isCollectWindow()||eagle.env.isBatchSaverWindow()?this.logger=new ForegroundLogger:this.logger=new BackgroundLogger}info(e,r){this.logger.info(e,r)}warn(e,r){this.logger.warn(e,r)}error(e,r){this.logger.error(e,r)}debug(e,r){this.logger.debug(e,r)}critical(e,r){this.logger.critical(e,r)}all(e){this.logger.all(e)}get(e,r){this.logger.get(e,r)}keep(e){this.logger.keep(e)}clean(){this.logger.clean()}status(){return this.logger.status()}openLogger(){this.logger.openLogger()}}eagle.logger=new Logger;