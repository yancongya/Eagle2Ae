class Library{async info(){var a=await eagle.fetch("http://localhost:41595/api/library/info",{redirect:"manual"});return a.isRedirect&&(isRedirect=!0,eagle.logger.info("[background] getRecentFolders, fail. localhost get redirect")),a.data.library.path=this.normalizePath(a.data.library.path),a.data}async history(){var a=await eagle.fetch("http://localhost:41595/api/library/history",{redirect:"manual"});return a.isRedirect&&(isRedirect=!0,eagle.logger.info("[background] get folder list, fail. localhost get redirect")),[...new Set(a.data.map(a=>this.normalizePath(a)))]}async switch(a){a={method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({libraryPath:a})};return(await eagle.fetch("http://localhost:41595/api/library/switch",a)).status}normalizePath(a){var t=a.includes(":\\");let e=a;return e=(e=t?e.replace(/\\/g,"/"):e).endsWith(".library/")?e.slice(0,-1):e}switchPromise(l){return new Promise(async(a,t)=>{let e,r;const i=()=>{clearInterval(e),clearTimeout(r)};e=setInterval(async()=>{try{(await this.info()).library.path===l&&(i(),a())}catch(a){i(),t()}},200),r=setTimeout(()=>{i(),t()},1e4);try{"error"==await this.switch(l)&&(i(),t())}catch(a){i(),t()}})}}eagle.library=new Library;