class ForegroundUrlTest{async testURL(e,r){return this.#sendBackgroundFetch(e,r)}async#sendBackgroundFetch(e,r){e=await eagle.runtime.sendMessage("testURL",{url:e,options:r});if(e.error)throw new Error(e.error);return e}}class BackgroundUrlTest{#TIMEOUT=2e4;constructor(){eagle.runtime.onMessage("testURL",async(e,r,t)=>{var{url:e,options:s}=e;try{t({responseStatus:await this.testURL(e,s)})}catch(e){t({error:e.message,responseStatus:!1})}return!0})}async testURL(e,r){var t=new AbortController;try{var s=await fetch(e,{method:"GET",signal:t.signal});return t.abort(),200===s.status}catch(e){return!1}}}class UrlTester{_urlTester;constructor(){!eagle.env.isBackground()||eagle.env.isPopup()||eagle.env.isCollectWindow()||eagle.env.isBatchSaverWindow()?this._urlTester=new ForegroundUrlTest:this._urlTester=new BackgroundUrlTest}async testURL(e,r){return this._urlTester.testURL(e,r)}}(()=>{const t=new UrlTester;eagle.urlTest=(e,r)=>t.testURL(e,r)})();